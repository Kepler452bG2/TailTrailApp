#!/usr/bin/env python3

import asyncio
import websockets
import json
import base64

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏–∑ Swagger
TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNDQxZjQ5ZTktYjZiYS00MjcyLThmMTAtNmIxZThkZDhlY2I4IiwiZXhwIjoxNzUzNDc1NDkwfQ.ulqgqu2fNZBakxr4zvpwj-HZaY-ONeeRF72jm-TTKns"

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user_id
payload = base64.b64decode(TOKEN.split('.')[1] + '==')
user_data = json.loads(payload)
USER_ID = user_data['user_id']

print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å —Ç–≤–æ–∏–º —Ç–æ–∫–µ–Ω–æ–º!")
print(f"User ID: {USER_ID}")
print("="*50)

async def test_websocket():
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    urls = [
        f"ws://209.38.237.102:8080/api/v1/websocket/ws/{USER_ID}",
        f"ws://209.38.237.102:8080/api/v1/websocket/ws/{USER_ID}?token={TOKEN}",
        f"ws://209.38.237.102:8080/ws/{USER_ID}",
    ]
    
    for url in urls:
        print(f"\nüîÑ –ü—Ä–æ–±—É–µ–º: {url[:60]}...")
        try:
            # –ü—Ä–æ–±—É–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Authorization
            headers = {"Authorization": f"Bearer {TOKEN}"}
            async with websockets.connect(url, additional_headers=headers) as websocket:
                print("‚úÖ –ü–û–î–ö–õ–Æ–ß–ò–õ–ò–°–¨!")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
                await websocket.send(json.dumps({
                    "type": "list_chats",
                    "data": {}
                }))
                print("üì§ –û—Ç–ø—Ä–∞–≤–∏–ª–∏: list_chats")
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5)
                    data = json.loads(response)
                    print(f"üì® –ü–æ–ª—É—á–∏–ª–∏: {data['type']}")
                    
                    if data['type'] == 'chat_list':
                        print(f"‚úÖ –ß–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(data.get('data', []))}")
                        
                    # –û—Ç–ø—Ä–∞–≤–∏–º –µ—â–µ ping –¥–ª—è —Ç–µ—Å—Ç–∞
                    await websocket.send(json.dumps({
                        "type": "ping",
                        "data": {"message": "Hello from iOS app!"}
                    }))
                    print("üì§ –û—Ç–ø—Ä–∞–≤–∏–ª–∏: ping")
                    
                    # –ñ–¥–µ–º pong
                    response = await asyncio.wait_for(websocket.recv(), timeout=5)
                    print(f"üì® –ü–æ–ª—É—á–∏–ª–∏: {response}")
                    
                    print("\n‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–∫–∞–∂–∏ –±—ç–∫–µ–Ω–¥–µ—Ä—É —á—Ç–æ –≤—Å–µ –û–ö!")
                    return True
                except asyncio.TimeoutError:
                    print("‚è±Ô∏è Timeout - –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
    
    return False

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
success = asyncio.run(test_websocket())

if not success:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü–æ–ø—Ä–æ—Å–∏ –±—ç–∫–µ–Ω–¥–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
    print(f"   - User ID: {USER_ID}")
    print(f"   - –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π (–∏–∑ Swagger)")
    print("   - WebSocket endpoint –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è") 