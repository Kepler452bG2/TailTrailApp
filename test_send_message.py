#!/usr/bin/env python3

import asyncio
import websockets
import json
import base64

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNDQxZjQ5ZTktYjZiYS00MjcyLThmMTAtNmIxZThkZDhlY2I4IiwiZXhwIjoxNzUzNDc1NDkwfQ.ulqgqu2fNZBakxr4zvpwj-HZaY-ONeeRF72jm-TTKns"

# –ß–∏—Ç–∞–µ–º chat_id –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open("last_chat_id.txt", "r") as f:
        CHAT_ID = f.read().strip()
except:
    CHAT_ID = "ea659252-e497-45f2-a09d-a984c9ceecb2"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
payload = base64.b64decode(TOKEN.split('.')[1] + '==')
user_data = json.loads(payload)
MY_USER_ID = user_data['user_id']

print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è!")
print(f"Chat ID: {CHAT_ID}")
print(f"User ID: {MY_USER_ID}")
print("="*60)

async def test_send_message():
    url = f"ws://209.38.237.102:8080/api/v1/websocket/ws/{MY_USER_ID}"
    headers = {"Authorization": f"Bearer {TOKEN}"}
    
    async with websockets.connect(url, additional_headers=headers) as ws:
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = {
            "type": "send_message",
            "data": {
                "chat_id": CHAT_ID,
                "content": "üéâ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket! –†–∞–±–æ—Ç–∞–µ—Ç!"
            }
        }
        
        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {json.dumps(message, ensure_ascii=False)}")
        await ws.send(json.dumps(message))
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        try:
            response = await asyncio.wait_for(ws.recv(), timeout=5)
            data = json.loads(response)
            
            print(f"\nüì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
            print(f"   –¢–∏–ø: {data.get('type')}")
            print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(data.get('data', {}), ensure_ascii=False, indent=2)}")
            
            if data['type'] == 'message_sent':
                print("\n‚úÖ –°–û–û–ë–©–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û!")
            elif data['type'] == 'error':
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {data.get('data', {}).get('message', 'Unknown error')}")
            
        except asyncio.TimeoutError:
            print("\n‚è±Ô∏è Timeout - –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\nüìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        get_messages = {
            "type": "get_messages",
            "data": {"chat_id": CHAT_ID}
        }
        await ws.send(json.dumps(get_messages))
        
        try:
            response = await asyncio.wait_for(ws.recv(), timeout=3)
            data = json.loads(response)
            print(f"–û—Ç–≤–µ—Ç: {data['type']}")
        except:
            pass

asyncio.run(test_send_message())

print("\nüí° –°–∫–∞–∂–∏ –±—ç–∫–µ–Ω–¥–µ—Ä—É:")
print("1. WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")
print("2. –ß–∞—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è ‚úÖ")
print("3. –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è (–ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏)")
print(f"4. Chat ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHAT_ID}") 