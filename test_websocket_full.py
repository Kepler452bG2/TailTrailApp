#!/usr/bin/env python3

import asyncio
import websockets
import json
import base64

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏–∑ Swagger
TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNDQxZjQ5ZTktYjZiYS00MjcyLThmMTAtNmIxZThkZDhlY2I4IiwiZXhwIjoxNzUzNDc1NDkwfQ.ulqgqu2fNZBakxr4zvpwj-HZaY-ONeeRF72jm-TTKns"

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
payload = base64.b64decode(TOKEN.split('.')[1] + '==')
user_data = json.loads(payload)
USER_ID = user_data['user_id']

print("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç WebSocket –¥–ª—è TailTrail")
print(f"User ID: {USER_ID}")
print("="*60)

async def test_websocket():
    url = f"ws://209.38.237.102:8080/api/v1/websocket/ws/{USER_ID}"
    headers = {"Authorization": f"Bearer {TOKEN}"}
    
    async with websockets.connect(url, additional_headers=headers) as ws:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ WebSocket!\n")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        test_messages = [
            {
                "name": "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
                "message": {"type": "list_chats", "data": {}}
            },
            {
                "name": "–°–æ–∑–¥–∞—Ç—å —á–∞—Ç (—Ç–µ—Å—Ç)",
                "message": {"type": "create_chat", "data": {"user_id": "test-user-123"}}
            },
            {
                "name": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "message": {"type": "send_message", "data": {
                    "chat_id": "test-chat-123",
                    "content": "–ü—Ä–∏–≤–µ—Ç –∏–∑ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!"
                }}
            },
            {
                "name": "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞",
                "message": {"type": "get_messages", "data": {"chat_id": "test-chat-123"}}
            },
            {
                "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø",
                "message": {"type": "unknown_type", "data": {}}
            }
        ]
        
        for test in test_messages:
            print(f"üì§ –¢–µ—Å—Ç: {test['name']}")
            print(f"   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {json.dumps(test['message'], ensure_ascii=False)}")
            
            await ws.send(json.dumps(test['message']))
            
            try:
                response = await asyncio.wait_for(ws.recv(), timeout=3)
                data = json.loads(response)
                
                if data['type'] == 'error':
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {data.get('data', {}).get('message', 'Unknown error')}")
                else:
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç —Ç–∏–ø–∞ '{data['type']}': {json.dumps(data.get('data', {}), ensure_ascii=False)[:100]}")
                    
            except asyncio.TimeoutError:
                print("   ‚è±Ô∏è  Timeout - –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞")
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                
            print()
        
        print("\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ê:")
        print("- WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
        print("- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
        print("- –û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
        print("\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –±—ç–∫–µ–Ω–¥–µ—Ä–∞:")
        print("1. –ö–∞–∫–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?")
        print("2. –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞")
        print("3. –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

asyncio.run(test_websocket()) 