#!/usr/bin/env python3

import asyncio
import websockets
import json
import base64
import uuid

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNDQxZjQ5ZTktYjZiYS00MjcyLThmMTAtNmIxZThkZDhlY2I4IiwiZXhwIjoxNzUzNDc1NDkwfQ.ulqgqu2fNZBakxr4zvpwj-HZaY-ONeeRF72jm-TTKns"

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
payload = base64.b64decode(TOKEN.split('.')[1] + '==')
user_data = json.loads(payload)
USER_ID = user_data['user_id']

print("üöÄ –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ UUID")
print(f"User ID: {USER_ID}")
print("="*60)

async def test_websocket():
    url = f"ws://209.38.237.102:8080/api/v1/websocket/ws/{USER_ID}"
    headers = {"Authorization": f"Bearer {TOKEN}"}
    
    async with websockets.connect(url, additional_headers=headers) as ws:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!\n")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ UUID
        test_chat_id = str(uuid.uuid4())
        test_user_id = str(uuid.uuid4())
        
        print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ UUID:")
        print(f"   chat_id: {test_chat_id}")
        print(f"   user_id: {test_user_id}")
        print()
        
        # –¢–µ—Å—Ç—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ UUID
        tests = [
            {
                "name": "send_message —Å –≤–∞–ª–∏–¥–Ω—ã–º UUID",
                "msg": {
                    "type": "send_message",
                    "data": {
                        "chat_id": test_chat_id,
                        "content": "–¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º UUID!"
                    }
                }
            },
            {
                "name": "send_message —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º chat_id (—Ç–≤–æ–π user_id –∫–∞–∫ —Ç–µ—Å—Ç)",
                "msg": {
                    "type": "send_message", 
                    "data": {
                        "chat_id": USER_ID,  # –ü—Ä–æ–±—É–µ–º —Ç–≤–æ–π user_id –∫–∞–∫ chat_id
                        "content": "–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                    }
                }
            },
            {
                "name": "create_chat —Å –≤–∞–ª–∏–¥–Ω—ã–º user_id",
                "msg": {
                    "type": "create_chat",
                    "data": {
                        "user_id": test_user_id
                    }
                }
            },
            {
                "name": "get_messages —Å –≤–∞–ª–∏–¥–Ω—ã–º UUID",
                "msg": {
                    "type": "get_messages",
                    "data": {
                        "chat_id": test_chat_id
                    }
                }
            }
        ]
        
        for test in tests:
            print(f"üì§ {test['name']}")
            print(f"   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {json.dumps(test['msg'], ensure_ascii=False)}")
            
            await ws.send(json.dumps(test['msg']))
            
            try:
                response = await asyncio.wait_for(ws.recv(), timeout=3)
                data = json.loads(response)
                
                if data['type'] == 'error':
                    error_msg = data.get('data', {}).get('message', 'Unknown error')
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    if "not found" in error_msg.lower():
                        print("      üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å")
                    elif "unknown message type" in error_msg.lower():
                        print(f"      üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¢–∏–ø '{test['msg']['type']}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                else:
                    print(f"   ‚úÖ –£—Å–ø–µ—Ö! –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {data['type']}")
                    print(f"      –î–∞–Ω–Ω—ã–µ: {json.dumps(data.get('data', {}), ensure_ascii=False)[:100]}")
                    
            except asyncio.TimeoutError:
                print("   ‚è±Ô∏è  Timeout")
            
            print()

asyncio.run(test_websocket()) 