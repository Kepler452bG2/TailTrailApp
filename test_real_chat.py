#!/usr/bin/env python3

import asyncio
import websockets
import json
import base64
import requests

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNDQxZjQ5ZTktYjZiYS00MjcyLThmMTAtNmIxZThkZDhlY2I4IiwiZXhwIjoxNzUzNDc1NDkwfQ.ulqgqu2fNZBakxr4zvpwj-HZaY-ONeeRF72jm-TTKns"
BASE_URL = "http://209.38.237.102:8080"

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
payload = base64.b64decode(TOKEN.split('.')[1] + '==')
user_data = json.loads(payload)
MY_USER_ID = user_data['user_id']

print("üöÄ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞")
print(f"–ú–æ–π User ID: {MY_USER_ID}")
print("="*60)

# –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")
headers = {"Authorization": f"Bearer {TOKEN}"}

profile_response = requests.get(f"{BASE_URL}/api/v1/users/me", headers=headers)
if profile_response.status_code == 200:
    my_profile = profile_response.json()
    print(f"‚úÖ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å: {json.dumps(my_profile, ensure_ascii=False)}")
else:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_response.text}")

# –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞...")
test_user_email = f"chat_test_{int(asyncio.get_event_loop().time())}@example.com"
register_response = requests.post(
    f"{BASE_URL}/api/v1/auth/signup",
    json={"email": test_user_email, "password": "password123"}
)

if register_response.status_code == 200 or "created" in register_response.text.lower():
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user_email}")
    
    # –õ–æ–≥–∏–Ω–∏–º—Å—è –∑–∞ –Ω–µ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID
    login_response = requests.post(
        f"{BASE_URL}/api/v1/auth/login",
        json={"email": test_user_email, "password": "password123"}
    )
    
    if login_response.status_code == 200:
        other_token = login_response.json().get("token")
        other_payload = base64.b64decode(other_token.split('.')[1] + '==')
        other_user_data = json.loads(other_payload)
        OTHER_USER_ID = other_user_data['user_id']
        print(f"‚úÖ ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {OTHER_USER_ID}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –∑–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        OTHER_USER_ID = None
else:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {register_response.text}")
    OTHER_USER_ID = None

# –®–∞–≥ 3: –ò—â–µ–º endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
print("\n3Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —á–µ—Ä–µ–∑ API...")
if OTHER_USER_ID:
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã endpoints
    chat_endpoints = [
        f"/api/v1/chats",
        f"/api/v1/chats/create",
        f"/api/v1/chat",
        f"/api/v1/messages/chat"
    ]
    
    created_chat_id = None
    
    for endpoint in chat_endpoints:
        print(f"\n   –ü—Ä–æ–±—É–µ–º POST {endpoint}")
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            chat_response = requests.post(
                f"{BASE_URL}{endpoint}",
                headers=headers,
                json={"user_id": OTHER_USER_ID}  # –∏–ª–∏ recipient_id, other_user_id
            )
            
            if chat_response.status_code in [200, 201]:
                chat_data = chat_response.json()
                print(f"   ‚úÖ –£—Å–ø–µ—Ö! –û—Ç–≤–µ—Ç: {json.dumps(chat_data, ensure_ascii=False)}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ chat_id –≤ –æ—Ç–≤–µ—Ç–µ
                if "id" in chat_data:
                    created_chat_id = chat_data["id"]
                elif "chat_id" in chat_data:
                    created_chat_id = chat_data["chat_id"]
                elif "chat" in chat_data and isinstance(chat_data["chat"], dict):
                    created_chat_id = chat_data["chat"].get("id")
                    
                if created_chat_id:
                    print(f"   üìù ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {created_chat_id}")
                break
            else:
                print(f"   ‚ùå {chat_response.status_code}: {chat_response.text[:100]}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

# –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å —Ä–µ–∞–ª—å–Ω—ã–º chat_id
async def test_websocket(chat_id=None):
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket...")
    
    url = f"ws://209.38.237.102:8080/api/v1/websocket/ws/{MY_USER_ID}"
    ws_headers = {"Authorization": f"Bearer {TOKEN}"}
    
    async with websockets.connect(url, additional_headers=ws_headers) as ws:
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        
        if chat_id:
            print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
            
            message = {
                "type": "send_message",
                "data": {
                    "chat_id": chat_id,
                    "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è üéâ"
                }
            }
            
            await ws.send(json.dumps(message))
            print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {json.dumps(message, ensure_ascii=False)}")
            
            try:
                response = await asyncio.wait_for(ws.recv(), timeout=5)
                data = json.loads(response)
                print(f"   –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False)}")
            except asyncio.TimeoutError:
                print("   ‚è±Ô∏è Timeout")
        else:
            print("‚ùå –ù–µ—Ç chat_id –¥–ª—è —Ç–µ—Å—Ç–∞")

# –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Ç–µ—Å—Ç
if OTHER_USER_ID:
    asyncio.run(test_websocket(created_chat_id))
else:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞") 